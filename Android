Pentesting Android App 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *First step to connect adb to your mobile device(Gennymotion).* 

 1) adb kill-server 

 2) adb start-server 

 3) adb devices 

 4) adb connect mobile_device_ip:5555 

 5) adb shell 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *After connecting adb shell we have to paste frida server into the /data/local or /data/local/tmp* 

 1) Download frida server from below mentioned link. 

    https://github.com/frida/frida/releases/download/14.2.12/frida-server-14.2.12-android-x86.xz    

 2) unzip frida-server-14.2.12-android-x86.xz 

 3) use below mentioned command for pasting frida-server-14.2.12-android-x86.xz into mobile device 

    adb push frida-server-14.2.12-android-x86.xz /data/local 

 4) Check whether frida server is properly working 

    - adb shell 

    - cd /data/local 

    - chmod +x frida-server-14.2.12-android-x86 

    - ./frida-server-14.2.12-android-x86 

 5) Open a new tab using ctrl+shft+T 

    frida-ps -Uai 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Root Detection Bypass* 

 Open 2 tabs  

 1) frida --codeshare dzonerzy/fridantiroot -f Package_name -U --no-pause  

                             OR 

    frida -U -l fridaantiroot.js -f packagename --no-pause 

  

     Reference - https://codeshare.frida.re/@dzonerzy/fridantiroot/ 

  

    - %resume      (Enter this command only after running objection's 1st command of listing activities) 

     

 2) Objection --gadget Package_name explore 

    - android hooking list activities        (Provides activity names whichever are mentioned in Mobile application) 

    - android intent launch_activity activity_name  (Hold don't press enter before running %resume through frida's request from 1st tab 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Unrestricted backup file - (ALLOWED BACKUP = TRUE) * 

 1) In androidmanifest.xml check for allowbackup = true if found the same carry on with the below mentioned commands 

 2) adb backup -f filename.ab com.android (package name) 

 3) abe.jar Download from below mentioned URL 

    github.com/nelenkov/android-backup-extractor - clone it this will convert in tar  

    https://sourceforge.net/projects/android-backup-processor/files/latest/download or download from here 

    https://sourceforge.net/projects/android-backup-processor/files/  

 4) java -jar /home/kali/Downloads/android-backup-extractor-20210530-bin/abe.jar unpack /home/kali/Desktop/filename.ab /home/kali/Desktop/filename.tar 1234 

 5) unzip the tar file  

 6) cd ~/home/kali/Desktop/apps/package_name/db/   --/ db locate 

 7) sqlite3 UserDB.db  

    - .tables 

    - select * from table_name \\ list the userdata in plain text  

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Multiple ways to bypass Android SSL-PINNING | #frida #objection #apkmitm - BONUS TUTORIAL* 

 - https://www.youtube.com/watch?v=vwrFoMoB9nE  

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *SSL Unpinning Bypass* 

 Do the steps mentioned earlier to  

 1) frida -U -f <your_application_package_name> -l <path_to_fridascript.js_on_your_computer> --no-pause 

    - frida -U -f com.twitter.android -l /home/mobexler/Desktop/fridascript.js --no-pause 

 2) frida -U -l sslpinning.js -f com.package.name --no-pause 

 3) app will stop working you have to relauch app without clearing cache 

  

  

 This is the frida script we have used  

  

 https://raw.githubusercontent.com/httptoolkit/frida-android-unpinning/main/frida-script.js 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Drozer - for dynamic analysis for android application* 

 1) start the drozer  

    - adb forward tcp:31415 tcp:31415 

    - adb shell am startservice -n com.mwr.dz/.service.ServerService -c com.mwr.dz.START.EMBEDDED 

    - drozer console connect  

   or to run globally cp this file to bin directory  

    - save this file as .sh extention eg: drozer-start.sh  

    - cp drozer-start.sh /bin 

 2) before starting drozer install the drozer apk in android emulator or android device  

    visit this link - download android apk - https://labs.f-secure.com/tools/drozer/ 

 3) Start drozer (Manually)- Install Drozer Agent APK in Genymotion and ON server- Launch Terminal - "adb forward tcp:31415 tcp:31415"- "drozer console connect"  

 4) Usage  

    - To get a list of all the installed apps  

       - "run app.package.list" 

    - To find the attack surface  

       - "run app.package.attacksurface [pkg-name]" 

    - To understand what this module does  

       - “help module-name” 

    - To gather for activity information  

       - “run app.activity.info -a package-name” 

    - To run activity component  

       - “run app.activity.start –component package-name activity-name” 

    - Finding the content providers  

       - "run.app.provider.finduri [pkg-name]" or scanner 

    - Querying the content provider 

       - "run app.provider.query [content-uri]"  

    - Find the vulnerable content provider  

       -"run scanner.provider.finduris -a [pkg-name]" 

    - Query the content provider 

       - “run app.provider.query content://uri”  

    - Scan the provider for injection vulnerability  

       - “run scanner.provider.injection -a package-name” 

    - Issue the query to sql injection to check tables   

       - “run app.provider.query content://url –projection --projection "* FROM SQLITE_MASTER WHERE type='table';--" ” 

    - Extract the data from tables  

       - run app.provider.query content://uri --projection "* FROM note--" 

    - Reading files via content provider   

       -"run app.provider.read [content-uri]/../../[file-name]" 

        

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Start the intent activity with adb* 

 -  adb shell am start -n package.name/activityname 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Resource For Reference*  

 -  https://stackoverflow.com/questions/13380590/is-it-possible-to-start-activity-through-adb-shell 

 -  https://oldbam.github.io/android/security/android-vulnerabilities-insecurebank-activities 

 -  https://reconshell.com/mobile-hacking-cheat-sheet/ 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Static analysis including websites provided with portals* 

 -  https://appsweep.guardsquare.com/ 

 -  https://lab.bitbaan.com/ 

 -  https://beta.pithus.org/ 

 -  https://www.immuniweb.com/mobile/ 

 -  MobSF(Tool installed in Mobexler / Can be downloaded seperately) 

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Dynamic analysis testing Checklist for reference* 

 -  https://mobexler.com/checklist.htm#android 

 -  https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting/drozer-tutorial/exploiting-content-providers 

 -  https://hacktricks.boitatech.com.br/mobile-apps-pentesting/android-checklist 

 -  https://book.hacktricks.xyz/mobile-pentesting/android-checklist 

 -  https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting 

 -  https://hackersonlineclub.com/mobile-security-penetration-testing/ 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Mindmap for Android APK Vulnerability Assessment & Penetration Testing* 

 -  https://www.xmind.net/m/GkgaYH/ 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Extra resources for references* 

 -  https://www.vegabird.com/yaazhini/ 

 -  https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting/android-applications-basics 

 -  https://twitter.com/purab_parihar/status/1447577659232243714?lang=en (purab parihar twitter) 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 Usage of Androguard (Reverse Engineering and Malware Analysis framework) 

 Open Source & Really handy for analyzing application 

 - https://github.com/androguard/androguard 

 - https://resources.infosecinstitute.com/topic/android-penetration-tools-walkthrough-series-androguard/ 

  

 Load up Androguard - Androlyze, Androsim, Androsign, etc. 

 Get all the activities, permissions and services  

 How to find classes and methods?  

 What about source code? 

  

  

 - androlyze -s  

 myapp = APK(‘path/of/apk’) 

 myapp.get_activities() 

 myapp.get_permission() 

 myapp.get_providers() 

  

 - press the tab after variable created myapp. + tab only in mobexler  

 myapp.androidversion 

 myapp.arsc 

 myapp.axml 

 myapp.filename 

 myapp.files 

 myapp.files_crc32 

 myapp.format_value 

 myapp.get_AndroidManifest 

 myapp.get_activities 

 myapp.get_android_manifest_axml 

 myapp.get_android_manifest_xml 

 myapp.get_android_resources 

 myapp.get_androidversion_code 

 myapp.get_androidversion_name 

 myapp.get_certificate 

 myapp.get_details_permissions 

 myapp.get_dex 

 myapp.get_element 

 myapp.get_elements 

 myapp.get_files 

 myapp.get_filename 

 myapp.get_file 

 myapp.get_files_crc32 

 myapp.get_files_information 

 myapp.get_files_types 

 myapp.get_intent_filters 

 myapp.get_libraries 

 myapp.get_main_activity 

 myapp.get_max_sdk_version 

 myapp.get_min_sdk_version 

 myapp.get_package 

 myapp.get_permissions 

 myapp.get_providers 

 myapp.get_raw 

 myapp.get_receivers 

 myapp.get_services 

 myapp.get_signature 

 myapp.get_signature_name 

 myapp.get_target_sdk_version 

 myapp.is_valid_apk 

 myapp.magic_file 

 myapp.new_zip 

 myapp.package 

 myapp.permissions 

 myapp.show 

 myapp.valid_apk 

 myapp.xml 

 myapp.zip 

 myapp.zipmodule 

  

 ----------------------------------------------------------------------------------------------------------------------------------------------------- 

  

 *Connect the Android Device with MOBEXLER and setup ADB* 

 1) goto settings - aboutphone - buildnumber - turn on usb debugging  

 2) install ADB in windows  

 3) https://dl.google.com/android/repository/platform-tools-latest-windows.zip  

 4) extract and set the path in edit environment variable in path D:\kanhaiya\PROJECT\10 worldline\files_android_lab\platform-tools 

 5) add the path in the systemvariable.  

 6) launch the cmd and type --- adb  

 7) adb devices  

 8) adb connect 192.168.0.1:5555 (genymotion device ip \ default port) 

 9) adb shell  

 10) adb push /mnt/sdcard/download  --- push filedevices  

 11) adb pull /mnt/sdcard/filename.cs 

 12) adb start-server 

 13) adb kill-server 

 14) adb devices  

 15) adb -s emulator-5554 install APK_Name.apk    --> this will allow to install the apk via adb in android device 

  

 -----------------------------------------------------------------------------------------------------------------------------------------------------
